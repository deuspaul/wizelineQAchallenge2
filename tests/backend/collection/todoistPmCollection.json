{
	"info": {
		"_postman_id": "516e6de2-5585-4ce7-ba93-57b586b1ac1f",
		"name": "Todoist",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PROJECT",
			"item": [
				{
					"name": "Get",
					"item": [
						{
							"name": "Get active tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2xx\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"\r",
											"pm.test(\"Json schema\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"content\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"projectID\"))\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tasks",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an active task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2xx\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"\r",
											"pm.test(\"Json schema\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"content\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"projectID\"))\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/tasks/4678574348",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks",
										"4678574348"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2xx\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/projects/{{projectID}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"projects",
										"{{projectID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create",
					"item": [
						{
							"name": "Create a new Project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2xx\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"/*\r",
											"pm.test(\"Your test name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.value).to.eql(100);\r",
											"});*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									},
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Wizeline QACA2-2\"\r\n}"
								},
								"url": {
									"raw": "{{baseURL}}/projects",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a new task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2xx\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"\r",
											"pm.test(\"Json schema\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"content\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"projectID\"))\r",
											"});\r",
											"\r",
											"//Negative Scenario: Validate ProjectID is Integer (for example putting it between \"\") \r",
											"pm.test(\"Negative Scenario ProjectID is not Int\", function(){\r",
											"    var req = JSON.parse(pm.request.body.raw);\r",
											"    //console.log(typeof(req.project_id));\r",
											"    pm.expect(typeof(req.project_id)=='number').to.be.true\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"project_id\": {{projectID}}, \r\n    \"content\": \"Buy Chips9\", \r\n    \"due_string\": \"tomorrow at 14:00\", \r\n    \"due_lang\": \"en\", \r\n    \"priority\": 3\r\n}"
								},
								"url": {
									"raw": "{{baseURL}}/tasks",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Update a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2xx\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"/*\r",
											"pm.test(\"Json schema\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"content\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"projectID\"))\r",
											"});\r",
											"*/\r",
											"//Negative Scenario: Validate Priority is Integer (for example putting it between \"\") \r",
											"pm.test(\"Negative Scenario Prioritty is not Int\", function(){\r",
											"    var req = JSON.parse(pm.request.body.raw);\r",
											"    //console.log(typeof(req.project_id));\r",
											"    pm.expect(typeof(req.priority)=='number').to.be.true\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"priority\": 2\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tasks/4678574348",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks",
										"4678574348"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change a task status to complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2xx\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"/*\r",
											"pm.test(\"Json schema\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"content\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"projectID\"))\r",
											"});\r",
											"\r",
											"//Negative Scenario: Validate Priority is Integer (for example putting it between \"\") \r",
											"pm.test(\"Negative Scenario Prioritty is not Int\", function(){\r",
											"    var req = JSON.parse(pm.request.body.raw);\r",
											"    //console.log(typeof(req.project_id));\r",
											"    pm.expect(typeof(req.priority)=='number').to.be.true\r",
											"})*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.todoist.com/rest/v1/tasks/4678587081/close",
									"protocol": "https",
									"host": [
										"api",
										"todoist",
										"com"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"4678587081",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reopen a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"/*pm.test(\"Status code is 2xx\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"*/\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"/*\r",
											"pm.test(\"Json schema\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
											"});\r",
											"\r",
											"pm.test(\"content\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"projectID\"))\r",
											"});\r",
											"\r",
											"//Negative Scenario: Validate Priority is Integer (for example putting it between \"\") \r",
											"pm.test(\"Negative Scenario Prioritty is not Int\", function(){\r",
											"    var req = JSON.parse(pm.request.body.raw);\r",
											"    //console.log(typeof(req.project_id));\r",
											"    pm.expect(typeof(req.priority)=='number').to.be.true\r",
											"})*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://api.todoist.com/rest/v1/tasks/4678587081/reopen",
									"protocol": "https",
									"host": [
										"api",
										"todoist",
										"com"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"4678587081",
										"reopen"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Delete a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 2xx\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 800ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/tasks/4678587081",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"tasks",
										"4678587081"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}